"""
Modeling module
Declare variables.

Pengfei Cheng

1. overall variables
        combustion turbine          steam turbine               PCC
        DAC                         compression & vented CO2    power

2. operation mode logic variables
        lambda                      y                           z0

3. disaggregated variables
4. DAC operational variables
5. costing variables
"""

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

function declare_variables(m)
    # 1. OVERALL VARIABLES
    #    indexed by hour
    #    basic variables that describe the operations of each unit.

    # 1.1 COMBUSTION TURBINE
    # overall load factor, from 0 to 100 (as sum of single GT load factor)
    @variable(m, 0 <= x_load[set_hour_0] <= 100)
    # overall power produced by GTs
    @variable(m, 0 <= x_power_GT[set_hour_0])
    # natural gas fuel rate
    @variable(m, 0 <= x_fuel[set_hour_0])
    # CO2 emission from burning natural gas
    @variable(m, 0 <= x_CO2_flue[set_hour_0])

    # 1.2 STEAM TURBINE
    # power generation from HP steam
    @variable(m, 0 <= x_power_HP[set_hour_0])
    # power generation from IP steam
    @variable(m, 0 <= x_power_IP[set_hour_0])
    # power generation from LP steam
    @variable(m, 0 <= x_power_LP[set_hour_0])
    # power generated by steam turbine
    @variable(m, 0 <= x_power_ST[set_hour_0])
    # energy allocated for LP power generation
    @variable(m, 0 <= x_steam_LP[set_hour_0])
    # allocatable energy load for LP power/DAC
    @variable(m, 0 <= x_steam_allocable[set_hour_0])

    # 1.3 PCC
    # CO2 captured by PCC
    @variable(m, 0 <= x_CO2_PCC[set_hour_0])
    # steam use of PCC
    @variable(m, 0 <= x_steam_PCC[set_hour_0])
    # power use of PCC
    @variable(m, 0 <= x_power_PCC[set_hour_0])
    # CO2 vented at the outlet of PCC
    @variable(m, 0 <= x_CO2_vent_PCC[set_hour_0])

    # 1.4 DAC
    # base energy for DAC units regeneration
    @variable(m, 0 <= x_steam_DAC_base[set_hour_0])
    # additional energy for the DAC steam generation unit
    @variable(m, 0 <= x_steam_DAC_extra[set_hour_0])
    # overall energy for DAC units regeneration (base + additional)
    @variable(m, 0 <= x_steam_DAC_total[set_hour_0])

    # 1.5 COMPRESSION & VENTED CO2
    @variable(m, 0 <= x_CO2_compress[set_hour_0])
    @variable(m, 0 <= x_power_compress[set_hour_0])
    # total captured CO2 (when positive)/vented CO2 (when negative)
    @variable(m, x_CO2_cap_total[set_hour_0])

    # 1.6 POWER
    # total power (sum of GTs and STs)
    @variable(m, 0 <= x_power_total[set_hour_0])
    # net power out
    @variable(m, 0 <= x_power_net[set_hour_0])
    # total auxiliary power
    @variable(m, 0 <= x_power_aux[set_hour_0])

    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------

    # 2. OPERATION MODEL LOGIC VARIABLES
    #    indexed by hour

    # convex weight of each extreme point (50, 100) for dispatch mode
    # continuous, 0 to 1
    @variable(m, 0 <= lambda[set_hour_0, x_range_extreme_points] <= 1)

    # if plant is on
    # binary
    @variable(m, y[set_hour_0], Bin, start = 1)

    # if plant starts up at hour i
    # binary
    @variable(m, z0[set_hour_0], Bin, start = 0)

    # if plant is during the start-up period
    # binary
    @variable(m, z[set_hour_0], Bin, start = 0)

    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------

    # 3. DISAGGREGATED VARIABLES
    #    indexed by hour and mode (start-up, or normal dispatch)

    @variable(m, 0 <= x_load_D[set_hour_0, set_mode])
    @variable(m, 0 <= x_power_D_HP[set_hour_0, set_mode])
    @variable(m, 0 <= x_power_D_IP[set_hour_0, set_mode])
    @variable(m, 0 <= x_power_D_aux[set_hour_0, set_mode])
    @variable(m, 0 <= x_fuel_D[set_hour_0, set_mode])
    @variable(m, 0 <= x_CO2_D_flue[set_hour_0, set_mode])
    @variable(m, 0 <= x_steam_D_DAC_base[set_hour_0, set_mode])
    @variable(m, 0 <= x_steam_D_allocable[set_hour_0, set_mode])

    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------


    # 4. DAC OPERATIONAL VARIABLES
    #    indexed by hour, 15-min

    @variable(m, 0 <= x_sorbent_A0[set_hour_0, set_quarter])
    @variable(m, 0 <= x_sorbent_A1[set_hour_0, set_quarter_0])
    @variable(m, 0 <= x_sorbent_R[set_hour_0, set_quarter])
    @variable(m, 0 <= x_sorbent_F[set_hour_0, set_quarter_0])
    @variable(m, 0 <= x_sorbent_S[set_hour_0, set_quarter_0])
    @variable(m, 0 <= x_CO2_DAC[set_hour_0, set_quarter])
    @variable(m, 0 <= x_steam_DAC[set_hour_0, set_quarter])
    @variable(m, 0 <= x_power_DAC[set_hour_0, set_quarter])

    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------
    # --------------------------------------------------------------------------

    # 5. COSTING VARIABLES
    #    no index

    # amount of total sorbent for air, tonne
    @variable(m, 0 <= x_sorbent_total)
    # fix(x_sorbent_total, 2990, force=true)
    # total cost of sorbent, $
    @variable(m, 0 <= x_cost_sorbent)

    # max adsorption air rate, m^3/s
    @variable(m, 0 <= x_air_adsorb_max)

    # air volume blown for DAC-air adsorption in the next slice (15 min), m^3
    @variable(m, 0 <= x_air_adsorb[set_hour_0, set_quarter_0])

    # adsorption system cost, $
    @variable(m, 0 <= x_cost_adsorb)

    # total capital cost of DACs, $
    # TPC
    @variable(m, 0 <= x_cost_DAC_TPC)

    # DAC FOM, $/yr
    @variable(m, 0 <= x_cost_DAC_FOM)

    # VOMs, $
    @variable(m, 0 <= x_cost_NGCC_VOM[set_hour_0])
    @variable(m, 0 <= x_cost_PCC_VOM[set_hour_0])
    @variable(m, 0 <= x_cost_DAC_VOM[set_hour_0])
    @variable(m, 0 <= x_cost_PCC_compr_VOM[set_hour_0])
    @variable(m, 0 <= x_cost_DAC_compr_VOM[set_hour_0])
end