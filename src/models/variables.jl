"""
Modeling module
Declare variables.

Pengfei Cheng

1. overall variables
        combustion turbine          steam turbine               PCC
        DAC                         compression & vented CO2    power

2. operation mode logic variables
        lambda                      y                           z

3. disjunctive variables
4. DAC operational variables
5. DAC costing variables

UPDATE:
        01-22-2022: fixed DAC FG to 0.
        02-20-2022: fixed DAC air to max DAC size.
        04-11-2022: 
                fixed x_CO2_DAC_FG_in to 0 to ensure value for x_CO2_PCC_vent is
                correct.
                removed x_steam_PCC_total and x_steam_PCC_slack.
        04-12-2022:
                added FOM and VOM terms.
"""

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

function declare_variables(m)
        # 1. OVERALL VARIABLES
        #    indexed by hour
        #    basic variables that describe the operations of each unit.

        # 1.1 COMBUSTION TURBINE
        # overall load factor, from 0 to 100 (as sum of single GT load factor)
        @variable(m, 0 <= x_load_factor[set_hour_0] <= 100)
        # overall power produced by GTs
        @variable(m, 0 <= x_power_GT[set_hour_0])
        # natural gas fuel rate
        @variable(m, 0 <= x_fuel[set_hour_0])
        # CO2 emission from burning natural gas
        @variable(m, 0 <= x_fuel_CO2[set_hour_0])

        # 1.2 STEAM TURBINE
        # power generation from HP steam
        @variable(m, 0 <= x_power_HP[set_hour_0])
        # power generation from IP steam
        @variable(m, 0 <= x_power_IP[set_hour_0])
        # power generation from LP steam
        @variable(m, 0 <= x_power_LP[set_hour_0])
        # power generated by steam turbine
        @variable(m, 0 <= x_power_ST[set_hour_0])
        # energy allocated for LP power generation
        @variable(m, 0 <= x_steam_for_LP[set_hour_0])
        # allocatable energy load for LP power/DAC
        @variable(m, 0 <= x_steam_allocable[set_hour_0])

        # 1.3 PCC
        # CO2 captured by PCC
        @variable(m, 0 <= x_CO2_PCC_cap[set_hour_0])
        # steam use of PCC
        @variable(m, 0 <= x_steam_PCC[set_hour_0])
        # power use of PCC
        @variable(m, 0 <= x_power_PCC[set_hour_0])
        # CO2 net amount at the outlet of PCC
        @variable(m, 0 <= x_CO2_PCC_out[set_hour_0])
        # CO2 vented at the outlet of PCC
        @variable(m, 0 <= x_CO2_PCC_vent[set_hour_0])
        # CO2 at the inlet of the DAC-FG (flue gas)/ outlet of PCC
        @variable(m, 0 <= x_CO2_DAC_FG_in[set_hour_0])

        for i in set_hour_0
                fix(x_CO2_DAC_FG_in[i], 0, force=true)
        end

        # 1.4 DAC
        # base energy for DAC units regeneration
        @variable(m, 0 <= x_steam_DAC_base[set_hour_0])
        # additional energy for the DAC steam generation unit
        @variable(m, 0 <= x_steam_DAC_extra[set_hour_0])
        # overall energy for DAC units regeneration (base + additional)
        @variable(m, 0 <= x_steam_DAC_total[set_hour_0])

        # 1.5 COMPRESSION & VENTED CO2
        @variable(m, 0 <= x_compress_CO2[set_hour_0])
        @variable(m, 0 <= x_compress_power[set_hour_0])
        @variable(m, x_vent_CO2[set_hour_0])

        # 1.6 POWER
        # total power (sum of GTs and STs)
        @variable(m, 0 <= x_power_total[set_hour_0])
        # net power out
        @variable(m, 0 <= x_power_out[set_hour_0])
        # total auxiliary power
        @variable(m, 0 <= x_power_aux[set_hour_0])

        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------

        # 2. OPERATION MODEL LOGIC VARIABLES
        #    indexed by hour

        # convex weight of each extreme point (50, 100) for dispatch mode
        # continuous, 0 to 1
        @variable(m, 0 <= lambda[set_hour_0, x_range_extreme_points] <= 1)

        # if plant is on
        # binary
        @variable(m, y[set_hour_0], Bin, start = 1)

        # if plant starts up at hour i
        # binary
        @variable(m, z[set_hour_0], Bin, start = 0)

        # if plant is during the start-up period
        # binary
        @variable(m, z2[set_hour_0], Bin, start = 0)

        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------

        # 3. DISJUNCTIVE VARIABLES
        #    indexed by hour and mode (start-up, or normal dispatch)

        @variable(m, 0 <= x_load_factor_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_power_HP_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_power_IP_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_power_aux_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_fuel_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_emission_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_steam_DAC_base_D[set_hour_0, set_mode])
        @variable(m, 0 <= x_steam_allocable_D[set_hour_0, set_mode])

        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------


        # 4. DAC OPERATIONAL VARIABLES
        #    indexed by hour, 15-min

        # sorbent allocated for adsorption (flue), DAC input
        @variable(m, 0 <= x_A0_FG[set_hour_0, set_quarter])
        # 15-min-absorbing sorbent (flue), DAC state
        @variable(m, 0 <= x_A1_FG[set_hour_0, set_quarter_0])
        # sorbent allocated for regeneration, kind of? input
        @variable(m, 0 <= x_R0_FG[set_hour_0, set_quarter])
        # sorbent allocated for regeneration in the prior slice, state
        @variable(m, 0 <= x_R1_FG[set_hour_0, set_quarter_0])
        # fresh sorbent (flue), state
        @variable(m, 0 <= x_f_FG[set_hour_0, set_quarter_0])
        # saturated sorbent (flue), state
        @variable(m, 0 <= x_s_FG[set_hour_0, set_quarter_0])
        # total CO2 captured from DAC-flue, tonne CO2
        @variable(m, 0 <= x_DAC_FG_CO2_cap[set_hour_0, set_quarter])
        # steam use from DAC-flue
        @variable(m, 0 <= x_DAC_FG_steam[set_hour_0, set_quarter])
        # power use from DAC-flue
        @variable(m, 0 <= x_DAC_FG_power[set_hour_0, set_quarter])
        # CO2 vented from DAC-flue
        @variable(m, 0 <= x_DAC_FG_CO2_vent[set_hour_0])

        # ----------------------------------------------------------------------

        @variable(m, 0 <= x_A0[set_hour_0, set_quarter])
        @variable(m, 0 <= x_A1[set_hour_0, set_quarter_0])
        # @variable(m, 0 <= x_A2_air[set_hour_0, set_quarter_0])
        @variable(m, 0 <= x_R[set_hour_0, set_quarter])
        # @variable(m, 0 <= x_R1_air[set_hour_0, set_quarter_0])
        @variable(m, 0 <= x_F[set_hour_0, set_quarter_0])
        @variable(m, 0 <= x_S[set_hour_0, set_quarter_0])
        @variable(m, 0 <= x_CO2_DAC_cap[set_hour_0, set_quarter])
        @variable(m, 0 <= x_steam_DAC[set_hour_0, set_quarter])
        @variable(m, 0 <= x_power_DAC[set_hour_0, set_quarter])
        @variable(m, 0 <= x_steam_DAC_slack[set_hour_0])

        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------
        # ----------------------------------------------------------------------

        # 5. DAC COSTING VARIABLES
        #    no index

        # amount of total sorbent for flue gas, tonne
        @variable(m, 0 <= x_sorbent_m_DAC_FG)
        fix(x_sorbent_m_DAC_FG, 0, force=true)
        # amount of total sorbent for air, tonne
        @variable(m, 0 <= x_sorbent_m)
        # fix(x_sorbent_m, 2990, force=true)
        # total cost of sorbent, $
        @variable(m, 0 <= cost_sorbent)

        # max adsorption air rate, m^3/s
        @variable(m, 0 <= x_adsorb_max_air_rate_FG)
        @variable(m, 0 <= x_adsorb_max_air_rate_air)

        # air volume blown for DAC-air adsorption in the next slice (15 min), m^3
        @variable(m, 0 <= x_adsorb_air_volume_DAC_air[set_hour_0, set_quarter_0])
        # air volume blown for DAC-FG adsorption in the next slice (15 min), m^3
        @variable(m, 0 <= x_adsorb_air_volume_DAC_FG[set_hour_0, set_quarter_0])

        # adsorption system cost, $
        @variable(m, 0 <= cost_adsorb_system)

        # total capital cost of DACs (both air and FG), $
        # TPC
        @variable(m, 0 <= TPC_DAC)

        # DAC FOM, $/yr
        @variable(m, 0 <= FOM_DAC)

        # VOMs, $
        @variable(m, 0 <= VOM_NGCC[set_hour_0])
        @variable(m, 0 <= VOM_PCC[set_hour_0])
        @variable(m, 0 <= VOM_DAC[set_hour_0])
        @variable(m, 0 <= VOM_PCC_compressor[set_hour_0])
        @variable(m, 0 <= VOM_DAC_compressor[set_hour_0])
end